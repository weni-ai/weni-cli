{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Weni CLI","text":"<p>Weni CLI is a command-line tool that simplifies the creation and management of multiple AI agents quickly and efficiently. Integrated with the Weni platform, it enables the development and deployment of high-performance agents across various communication channels, such as WhatsApp, Instagram, Facebook, and more.</p> <p></p>"},{"location":"#overview","title":"Overview","text":"<p>With it, you can:</p> <ul> <li> Create AI agents</li> <li> Add custom tools to your agents</li> <li> Deploy agents</li> <li> Update agent configurations and behaviors</li> <li> Manage multiple agents in your projects</li> </ul>"},{"location":"contributing/","title":"Contributing to Weni CLI","text":"<p>Thank you for your interest in contributing to Weni CLI! This guide will help you get started with contributing to the project.</p>"},{"location":"contributing/#development-setup","title":"Development Setup","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python &gt;= 3.12</li> <li>Poetry &gt;= 1.8.5</li> <li>Git</li> </ul>"},{"location":"contributing/#setting-up-development-environment","title":"Setting Up Development Environment","text":"<ol> <li> <p>Fork the repository on GitHub</p> </li> <li> <p>Clone your fork:    <pre><code>git clone https://github.com/YOUR_USERNAME/weni-cli.git\ncd weni-cli\n</code></pre></p> </li> <li> <p>Install dependencies:    <pre><code>poetry install\n</code></pre></p> </li> <li> <p>Create a new branch:    <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"contributing/#development-guidelines","title":"Development Guidelines","text":""},{"location":"contributing/#code-style","title":"Code Style","text":"<ul> <li>Follow PEP 8 guidelines</li> <li>Use meaningful variable and function names</li> <li>Add docstrings to functions and classes</li> <li>Keep functions focused and concise</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<ol> <li> <p>Write tests for new features:    <pre><code>def test_your_feature():\n    # Your test code here\n    assert expected == actual\n</code></pre></p> </li> <li> <p>Run tests:    <pre><code>poetry run pytest\n</code></pre></p> </li> <li> <p>Check coverage:    <pre><code>poetry run pytest --cov\n</code></pre></p> </li> </ol>"},{"location":"contributing/#documentation","title":"Documentation","text":"<ol> <li>Update documentation for new features</li> <li>Add docstrings to new functions</li> <li>Update README.md if needed</li> <li>Add examples when relevant</li> </ol>"},{"location":"contributing/#making-changes","title":"Making Changes","text":""},{"location":"contributing/#workflow","title":"Workflow","text":"<ol> <li>Create a feature branch</li> <li>Make your changes</li> <li>Write or update tests</li> <li>Update documentation</li> <li>Run tests locally</li> <li>Commit your changes</li> <li>Push to your fork</li> <li>Create a Pull Request</li> </ol>"},{"location":"contributing/#commit-messages","title":"Commit Messages","text":"<p>Follow conventional commits:</p> <ul> <li><code>feat:</code> New features</li> <li><code>fix:</code> Bug fixes</li> <li><code>docs:</code> Documentation changes</li> <li><code>test:</code> Adding or updating tests</li> <li><code>chore:</code> Maintenance tasks</li> </ul> <p>Example: <pre><code>git commit -m \"feat: add support for custom headers in requests\"\n</code></pre></p>"},{"location":"contributing/#pull-requests","title":"Pull Requests","text":""},{"location":"contributing/#pr-guidelines","title":"PR Guidelines","text":"<ol> <li>Create one PR per feature/fix</li> <li>Include tests</li> <li>Update documentation</li> <li>Reference issues if applicable</li> <li>Keep changes focused and minimal</li> </ol>"},{"location":"contributing/#pr-template","title":"PR Template","text":"<pre><code>## Description\nBrief description of changes\n\n## Type of Change\n- [ ] Bug fix\n- [ ] New feature\n- [ ] Documentation update\n- [ ] Other (specify)\n\n## Testing\nDescribe testing done\n\n## Documentation\nList documentation updates\n</code></pre>"},{"location":"contributing/#review-process","title":"Review Process","text":"<ol> <li>Automated checks must pass</li> <li>Code review by maintainers</li> <li>Documentation review</li> <li>Changes requested if needed</li> <li>Approval and merge</li> </ol>"},{"location":"contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Create an issue for bugs</li> <li>Ask questions in discussions</li> <li>Join our community channels</li> </ul>"},{"location":"contributing/#development-tools","title":"Development Tools","text":""},{"location":"contributing/#recommended-vscode-extensions","title":"Recommended VSCode Extensions","text":"<ul> <li>Python</li> <li>YAML</li> <li>markdownlint</li> <li>GitLens</li> </ul>"},{"location":"contributing/#useful-commands","title":"Useful Commands","text":"<pre><code># Format code\npoetry run black .\n\n# Run linter\npoetry run flake8\n\n# Run tests\npoetry run pytest\n\n# Build documentation\npoetry run mkdocs serve\n</code></pre>"},{"location":"contributing/#release-process","title":"Release Process","text":"<ol> <li>Version bump</li> <li>Update CHANGELOG</li> <li>Create release PR</li> <li>Tag release</li> <li>Deploy to PyPI</li> </ol>"},{"location":"contributing/#community","title":"Community","text":"<ul> <li>Be respectful and inclusive</li> <li>Help others when possible</li> <li>Share knowledge</li> <li>Follow our Code of Conduct</li> </ul> <p>Thank you for contributing to Weni CLI! \ud83c\udf89</p>"},{"location":"community/community/","title":"Community","text":"<p>At Weni, we believe that through simple, multilingual, open-source, and human-centered technology, we can give a voice to thousands of people. That\u2019s why we see our community as a collaborative way to democratize information. In this space, the Weni Platform will be continuously improved. Thanks to the contributions of different developers and their innovative ideas, we will be able to:</p> <ul> <li> Enhance solutions</li> <li> Implement new features</li> <li> Solve problems</li> <li> Connect people</li> </ul> <p>Thank you for being here and for helping us unlock human potential more and more. Feel free to contribute with your questions and suggestions.This is the right place to gain more experience and knowledge.</p> <p></p> <p>Engage with the Weni community</p>"},{"location":"core-concepts/active-agents/","title":"Active Agents","text":""},{"location":"core-concepts/active-agents/#overview","title":"Overview","text":"<p>Active Agents are designed to proactively engage based on predefined rules and conditions. Unlike Passive Agents that primarily react to user input, Active Agents can initiate actions or communications when specific criteria are met, often triggered by changes in data or system events.</p> <p>The command to deploy an Active Agent remains the same: <code>weni project push agent_definition.yaml</code></p> <p>However, the structure of the <code>agent_definition.yaml</code> is different to accommodate the rule-based behavior and pre-processing capabilities.</p>"},{"location":"core-concepts/active-agents/#creating-an-active-agent","title":"Creating an Active Agent","text":"<p>An Active Agent's definition is also done using a YAML file. Here's an example of the structure for an Active Agent:</p> agent_definition.yaml<pre><code>agents:\n  my_agent:\n    name: \"Status do Pedido\"\n    description: \"Agente de exemplo\"\n    rules:\n      status_aprovado:\n        display_name: \"Status Aprovado\"\n        template: \"template_status_aprovado\"\n        start_condition: \"Quando o status estiver 'aprovado'\"\n        source:\n          entrypoint: \"main.StatusAprovado\"\n          path: \"rules/status_aprovado\"\n      status_invoiced:\n        display_name: \"Status Invoiced\"\n        template: \"template_status_invoiced\"\n        start_condition: \"Quanto o status estiver 'invoiced'\"\n        source:\n          entrypoint: \"main.StatusInvoiced\"\n          path: \"rules/status_invoiced\"\n    pre_processing:\n      source:\n        entrypoint: \"processing.PreProcessor\"\n        path: \"pre_processors/processor\"\n      result_examples_file: \"result_example.json\"\n</code></pre>"},{"location":"core-concepts/active-agents/#yaml-elements","title":"YAML Elements","text":"<p>Below are the key elements specific to or different in Active Agent definitions:</p> <code>agents.&lt;agent_id&gt;</code> <p>The unique identifier for your agent.</p> <code>name</code> The display name of your agent. Limit:  Maximum of 55 characters. <code>description</code> A description of the agent's purpose and capabilities. <code>rules</code> <p>A dictionary defining the rules that trigger the agent's actions. Each key within <code>rules</code> is a unique rule ID.</p> <code>rules.&lt;rule_id&gt;.display_name</code> The human-readable name for the rule. <code>rules.&lt;rule_id&gt;.template</code> The template to be used when this rule is triggered. (Further details on templates might be needed here or in a separate section). <code>rules.&lt;rule_id&gt;.start_condition</code> A description of the condition that must be met for this rule to activate. <code>rules.&lt;rule_id&gt;.source</code> Defines the code to be executed when the rule is triggered. <code>entrypoint</code>: The specific class and method (e.g., <code>main.StatusAprovado</code>) that will be executed. <code>path</code>: The directory path where the rule's code is located (e.g., <code>rules/status_aprovado</code>). <code>pre_processing</code> <p>Defines a pre-processing step that can transform or prepare data before rules are evaluated.</p> <code>pre_processing.source</code> Defines the code for the pre-processing logic. <code>entrypoint</code>: The class and method for pre-processing (e.g., <code>processing.PreProcessor</code>). <code>path</code>: The directory path for the pre-processing code (e.g., <code>pre_processors/processor</code>). <code>pre_processing.result_examples_file</code> Required. Path to a JSON file containing examples of the data output from pre-processing. The format is an array of objects."},{"location":"core-concepts/active-agents/#result-example-json-format","title":"Result Example JSON Format","text":"<p>The <code>result_example.json</code> file should follow this structure:</p> <p>result_example.json<pre><code>[\n    {\n        \"urn\": \"&lt;identifier_for_contact&gt;\",\n        \"data\": {\n            \"key1\": \"value1\",\n            \"key2\": \"value2\"\n            // ... other data fields relevant to the example\n        }\n    },\n    {\n        \"urn\": \"&lt;another_contact_identifier&gt;\",\n        \"data\": {\n            \"fieldA\": \"dataA\",\n            \"fieldB\": \"dataB\"\n        }\n    }\n    // ... more examples\n]\n</code></pre> Each object in the array represents a test case or an example scenario. - <code>urn</code>: A unique identifier for the contact (e.g., a phone number, user ID). - <code>data</code>: An object containing the data relevant to this specific example. The structure of this <code>data</code> object will depend on your agent's specific needs and the information it processes.</p>"},{"location":"core-concepts/active-agents/#basic-structure","title":"Basic Structure","text":"<p>The project structure for an Active Agent might look like this, incorporating rules and pre-processing logic:</p> <pre><code>your-project-name/\n\u251c\u2500\u2500 rules/\n\u2502   \u251c\u2500\u2500 status_aprovado/\n\u2502   \u2502   \u2514\u2500\u2500 main.py\n\u2502   \u2502   \u2514\u2500\u2500 requirements.txt\n\u2502   \u2514\u2500\u2500 status_invoiced/\n\u2502       \u2514\u2500\u2500 main.py\n\u2502       \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 pre_processors/\n\u2502   \u2514\u2500\u2500 processor/\n\u2502       \u2514\u2500\u2500 processing.py\n\u2502       \u2514\u2500\u2500 requirements.txt\n\u251c\u2500\u2500 agent_definition.yaml\n\u2514\u2500\u2500 result_example.json \n</code></pre> <p>This structure helps organize the different components of your Active Agent. </p>"},{"location":"core-concepts/contact-fields/","title":"Contact Fields","text":""},{"location":"core-concepts/contact-fields/#overview","title":"Overview","text":"<p>Contact fields are persistent information about contacts who interact with your agents. By enabling contact fields in your tools, you elevate the user experience to a new level, as your agents can interact with the Weni Platform to accurately obtain information about the contact.</p>"},{"location":"core-concepts/contact-fields/#how-contact-fields-work","title":"How Contact Fields Work","text":"<p>When you mark a parameter as a contact field in your tool definition, that information becomes persistent in the user's profile within the Weni Platform. This creates several advantages:</p> <ol> <li>Improved User Experience: Users don't need to repeatedly provide the same information in future interactions</li> <li>Personalized Interactions: Agents can address users with personalized information from previous conversations</li> <li>Streamlined Conversations: Reduces the number of questions agents need to ask, making interactions more efficient</li> </ol>"},{"location":"core-concepts/contact-fields/#implementing-contact-fields","title":"Implementing Contact Fields","text":"<p>To implement a contact field in your tool, you need to set the <code>contact_field</code> parameter to <code>true</code> in your agent definition YAML file:</p> <pre><code>parameters:\n  - tool_parameter:\n      description: \"User's full name\"\n      type: \"string\"\n      required: true\n      contact_field: true\n</code></pre> <p>When this parameter is processed during a conversation, the information provided by the user will be:</p> <ul> <li> Stored in the Weni Platform associated with that specific contact</li> <li> Available for retrieval and update in future interactions</li> <li> Accessible to all agents that have permission to view this contact field</li> </ul>"},{"location":"core-concepts/contact-fields/#best-practices","title":"Best Practices","text":"<p>When implementing contact fields, consider the following best practices:</p> <ul> <li>Only store relevant information: Not every parameter is necessarily a contact field; focus on information that will be useful in future interactions. Consider whether the parameter contains information important enough to be persisted for the contact.</li> <li>Use descriptive parameter names: This helps maintain organization when multiple contact fields are in use</li> <li>Validate data before storing: Ensure the information is in the correct format before saving it as a contact field</li> </ul>"},{"location":"core-concepts/contact-fields/#example-use-cases","title":"Example Use Cases","text":"<p>Contact fields are particularly useful for:</p> <ul> <li>Personal information: Names, addresses, preferences</li> <li>Account details: Customer IDs, subscription types</li> <li>Context-specific data: Preferred language, communication preferences</li> <li>Historical information: Previous purchases, service history</li> </ul> <p>By effectively utilizing contact fields, you can create more intelligent, context-aware agents that provide a seamless experience for your users.</p>"},{"location":"core-concepts/credentials/","title":"Credentials","text":"<p>Credentials are confidential information that your agents can use when invoking a specific tool. To fully understand how to incorporate credentials into your agents, we recommend reading this entire content and the following complementary resources: Agents and tools.</p> <p>Credentials are extremely important at two stages of your agents' development cycle:</p> <ul> <li> For local testing of tools during development</li> <li> For your agent to be used in production on channels integrated with the Weni platform, such as WhatsApp or any other</li> </ul>"},{"location":"core-concepts/credentials/#credential-structure","title":"Credential Structure","text":"<p>In your agent definition file (YAML), credentials are defined in the <code>credentials</code> section and follow this structure:</p> <pre><code>agents:\n  my_agent:\n    credentials:\n      API_KEY:\n        label: \"API Key\"\n        placeholder: \"your-api-key-here\"\n        is_confidential: true\n      API_SECRET:\n        label: \"API Secret\"\n        placeholder: \"your-api-secret-here\"\n      BASE_URL:\n        label: \"Base URL\"\n        placeholder: \"https://api.example.com\"\n        is_confidential: false\n</code></pre> <p>Each credential has the following attributes:</p> <ul> <li>label: Human-readable name that will be displayed in the Weni Platform interface</li> <li>placeholder: Example text or hint about what should be entered</li> <li>is_confidential: Indicates whether the credential contains sensitive information (defaults to <code>true</code> if not specified)</li> </ul>"},{"location":"core-concepts/credentials/#credentials-in-production-environment","title":"Credentials in Production Environment","text":"<p>When your agent is deployed on the Weni Platform, credentials are securely managed by the system. This ensures that sensitive information, such as API keys and access tokens, is stored and transmitted securely.</p>"},{"location":"core-concepts/credentials/#how-to-configure-credentials-for-production","title":"How to Configure Credentials for Production","text":"<ol> <li> <p>Define credentials in the YAML file: Specify all necessary credentials in the <code>credentials</code> section of your agent definition file.</p> </li> <li> <p>Deploy your agent: When pushing your agent to the Weni Platform using the CLI, the system will automatically detect the credentials defined in your YAML file.</p> </li> <li> <p>Configure values in the interface: Administrators will be able to configure the actual credential values through the Weni Platform interface, without needing to modify the code.</p> </li> <li> <p>Associate credentials with tools: Ensure that each tool that needs credentials is correctly configured to access them through the <code>context.credentials</code> object.</p> </li> </ol> <p>Note: When you assign your agent in the Weni Platform, the credentials defined in your YAML file will be displayed in the interface for configuration. For example, if you have the following agent definition:</p> <pre><code>agents:\n    cep_agent:\n        credentials:\n            api_key:\n                label: \"API Key\"\n                placeholder: \"Enter your API key\"\n        name: \"CEP Agent\"\n        description: \"Weni's CEP agent with components\"\n        instructions:\n        - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n        - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n        guardrails:\n        - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n        tools:\n        - get_address:\n            name: \"Get Address\"\n            source:\n                path: \"tools/get_address\"\n                entrypoint: \"main.GetAddress\"\n                path_test: \"test_definition.yaml\"\n            description: \"Function to get the address from the postal code\"\n            parameters:\n                - cep:\n                    description: \"postal code of a place\"\n                    type: \"string\"\n                    required: true\n                    contact_field: true\n</code></pre> <p>After running the command <code>weni project push agent_definition.yaml</code> to upload your agent to your project on the Weni Platform, you'll find your agent in the Agent Builder gallery. When you select and assign this agent, you'll be prompted to enter the actual values for the credentials you defined (in this case, the API Key).</p> <p></p> <p>Enter you credentials:</p> <p></p>"},{"location":"core-concepts/credentials/#security-in-production","title":"Security in Production","text":"<p>In the Weni Platform, credentials are:</p> <ul> <li>Stored in encrypted form</li> <li>Never exposed in logs or user interfaces</li> </ul>"},{"location":"core-concepts/credentials/#credentials-for-local-testing","title":"Credentials for Local Testing","text":"<p>During development and local testing of your tools, you'll need to provide credentials for your tools to work correctly without depending on the Weni Platform infrastructure.</p>"},{"location":"core-concepts/credentials/#configuring-credentials-for-local-development","title":"Configuring Credentials for Local Development","text":"<p>For local testing, the CLI reads a <code>.env</code> file located in the tool's <code>source.path</code> directory. Define the same credential names that are declared in your agent definition. This mirrors how credentials are injected in production.</p> <p>For example, if your CEP Agent definition has the following credentials:</p> <pre><code>agents:\n  cep_agent:\n    credentials:\n      api_key:\n        label: \"API Key\"\n        placeholder: \"Enter your API key\"\n    # Rest of the agent definition...\n</code></pre> <p>Create a <code>.env</code> file inside the tool folder (e.g. <code>tools/get_address/.env</code>) with:</p> <pre><code>api_key=your-development-api-key\n</code></pre>"},{"location":"core-concepts/passive-agents/","title":"Passive Agents","text":"<p>This page describes Passive Agents, which are AI-powered workers designed to operate autonomously by reacting to user input or specific triggers within a defined context.</p>"},{"location":"core-concepts/passive-agents/#overview","title":"Overview","text":"<p>Passive Agents are AI-powered workers designed to operate autonomously within specific contexts, using generative AI to make decisions based on given problems. In the context of Weni CLI, these agents are specifically optimized for customer service operations, serving as the frontline communication interface between companies and their customers by responding to inquiries and executing tasks based on their configured skills.</p> <p>Key features:</p> <ul> <li> Autonomous decision-making capabilities</li> <li> Context-specific operations</li> <li> Built-in generative AI processing</li> <li> Customer service optimization</li> </ul> <p>With Weni CLI, you can define and deploy multiple agents that work together to solve real-world problems with precision, quality, and security. These agents can be equipped with various tools that enable them to interact with the external world within defined boundaries.</p>"},{"location":"core-concepts/passive-agents/#creating-a-passive-agent","title":"Creating a Passive Agent","text":"<p>A Passive Agent consists of an agent definition. In Weni CLI, this definition is made using a YAML file, where you can specify its behavior, instructions, and skills.</p> <p>Here is an example of how you can define your agent in a YAML file:</p> agent_definition.yaml<pre><code>agents:\n  cep_agent:\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddress\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre>"},{"location":"core-concepts/passive-agents/#yaml-elements","title":"YAML Elements","text":"AgentTool <code>Name</code> <p>The name of your agent that will be displayed in the Weni Platform. Limit:  Maximum of 55 characters</p> <code>Credentials</code> <p>The credentials used in the tools you define for your agent. For more detailed information about this definition, see Credentials.</p> <code>Description</code> <p>Important information about your agent, where you can describe its purpose, capabilities, and other relevant details.</p> <code>Instructions</code> <p>Here you can define rules and guidelines that your agent should follow. Limit:  Minimum of 40 characters.</p> <code>Guardrails</code> <p>You can list boundaries and limitations for your agent, such as topics it should not discuss. Limit:  Minimum of 40 characters.</p> <code>Name</code> <p>The name of the tool that will be associated with the agent in the Weni Platform. Limit:  Maximum of 40 characters</p> <code>Source</code> <p>The location or path where the tool can be found. It contains three important elements:</p> <ul> <li> <p><code>path</code>: The directory path where your tool's code is located. This is typically a relative path from the root of your project.</p> </li> <li> <p><code>entrypoint</code>: The specific class that will be executed when the tool is called. It follows the format \"file_name.ClassName\". You can see a practical example of the tool implementation for this entrypoint in the example page, where the GetAddress class from this example is implemented.</p> </li> <li> <p><code>path_test</code>: The location of the test file for your tool, which contains test cases to validate the tool's functionality.</p> </li> </ul> <code>Description</code> <p>Information about the tool, including its purpose and objectives.</p> <code>Parameters</code> <p>The parameters or variables used in your agent's tool.</p> <ul> <li> <p><code>description</code>: A clear explanation of what the parameter is used for and what kind of data it expects.</p> </li> <li> <p><code>type</code>: The data type of the parameter (one of: string, number, integer, boolean, array).</p> </li> <li> <p><code>required</code>: A boolean value (true/false) indicating whether the parameter must be provided for the tool to function properly. If set to true, the agent will ask the user for this information if it's not available before proceeding with the request.</p> </li> <li> <p><code>contact_field</code>: Specifies if the parameter should be stored as a contact field in the user's profile for future reference. If set to true, the respective parameter will become information that persists for the user integrated with the Weni Platform. This brings benefits to the user experience because in future interactions, your agent may not need to request this information from the user again. Read more about contact fields in Contact Fields.</p> </li> </ul>"},{"location":"core-concepts/passive-agents/#basic-structure","title":"Basic Structure","text":"<p>The basic structure of your project should consist of your agent definition written in YAML and your agent's tools organized into directories. It is not mandatory to organize your tools in a 'tools' directory, but it is highly recommended as a best practice.</p> <p>Based on the definition example below:</p> agent_definition.yaml<pre><code>agents:\n  cep_agent:\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddress\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre> <p>Your project should have the following structure: <pre><code>your-project-name/\n\u251c\u2500\u2500 tools/\n\u2502   \u251c\u2500\u2500 get_address/main.py\n\u2514\u2500\u2500 agent_definition.yaml\n</code></pre></p>"},{"location":"core-concepts/tools/","title":"Tools","text":""},{"location":"core-concepts/tools/#what-are-tools","title":"What Are Tools?","text":"<p>Tools are powerful tools available to your agent that enable it to interact with the external environment and the real world. Think of tools as superpowers for your agent - you can create virtually any capability your agent needs by writing Python code that implements your specific business logic!</p>"},{"location":"core-concepts/tools/#why-tools-matter","title":"Why Tools Matter","text":"<p>Tools transform your agent from a simple conversational interface into a powerful tool that can:</p> <ul> <li>Fetch real-time data from external APIs</li> <li>Perform complex calculations and data processing</li> <li>Interact with databases and storage systems</li> <li>Execute custom business logic specific to your needs</li> <li>Integrate with third-party services and platforms</li> <li>Automate tasks and workflows</li> </ul>"},{"location":"core-concepts/tools/#using-tools-in-your-agent","title":"Using Tools in Your Agent","text":"<p>Once you've created a tool, you can relate it to your agent by defining it in your agent's YAML configuration file, as demonstrated in the Agents documentation page. The agent will automatically detect when to use the tool based on the context of the conversation.</p> <p>By creating custom tools, you can extend your agent's capabilities to handle specific tasks relevant to your use case, making your agent truly tailored to your business needs.</p>"},{"location":"core-concepts/tools/#tool-example-address-lookup","title":"Tool Example: Address Lookup","text":"<p>Here's an example of a tool that allows an agent to interact with the real world to precisely obtain information about a postal code (CEP in Brazil):</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\n\nclass GetAddress(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n\n        cep = context.parameters.get(\"cep\", \"\")\n\n        print(cep)\n\n        address_response = self.get_address_by_cep(cep=cep)\n\n        print(address_response)\n\n        return TextResponse(data=address_response)\n\n    def get_address_by_cep(self, cep):\n        url = f\"https://viacep.com.br/ws/{cep}/json/\"\n\n        response = requests.get(url)\n\n        return response.json()\n</code></pre>"},{"location":"core-concepts/tools/#code-explanation","title":"Code Explanation","text":"For BeginnersFor Experienced Developers <p>If you're new to programming, here's a simpler explanation of what this code does:</p> <ol> <li>Imports: First, we bring in the tools we need:</li> <li><code>Tool</code>: The base class that gives our tool its core functionality</li> <li><code>Context</code>: Holds information about the conversation</li> <li><code>TextResponse</code>: Helps us send text back to the user</li> <li> <p><code>requests</code>: A tool that lets us get information from websites</p> </li> <li> <p>Class Definition: We create a new tool called <code>GetAddress</code> that can look up addresses.</p> </li> <li> <p>Execute Method: This is the main part that runs when someone uses the tool:</p> </li> <li>It gets the postal code (CEP) that the user provided</li> <li>It prints the CEP to help with debugging</li> <li>It calls another function to find the address for that CEP</li> <li> <p>It returns the address information to the user</p> </li> <li> <p>Helper Method: The <code>get_address_by_cep</code> function:</p> </li> <li>Takes a postal code as input</li> <li>Creates a web address (URL) to look up that postal code</li> <li>Sends a request to a website that knows about addresses</li> <li>Gets back information about the address and returns it</li> </ol> <p>Think of this tool like a helper that knows how to look up addresses in a phone book when you give it a postal code!</p> <p>For those familiar with Python and API development:</p> <ol> <li> <p>Imports: We import the necessary Weni framework classes (<code>Tool</code>, <code>Context</code>, <code>TextResponse</code>) and the <code>requests</code> library for HTTP operations.</p> </li> <li> <p>Class Definition: We define a <code>GetAddress</code> class that inherits from the base <code>Tool</code> class, which provides the framework integration.</p> </li> <li> <p>Execute Method: This is the entry point that the Weni framework calls:</p> </li> <li>It extracts the \"cep\" parameter from the context object using a get() with a default empty string</li> <li>It includes debug print statements for logging</li> <li>It delegates the actual API call to a separate method for better separation of concerns</li> <li> <p>It returns a <code>TextResponse</code> object with the JSON data from the API</p> </li> <li> <p>Helper Method: The <code>get_address_by_cep</code> method:</p> </li> <li>Constructs the ViaCEP API endpoint URL with string interpolation</li> <li>Makes a GET request to the external API</li> <li>Returns the parsed JSON response directly</li> <li>Note that this implementation is minimal and lacks error handling for production use</li> </ol> <p>This implementation follows a simple separation of concerns pattern but could be enhanced with error handling, input validation, response formatting, and proper logging for production use.</p>"},{"location":"core-concepts/tools/#creating-your-own-tools","title":"Creating Your Own Tools","text":"<p>To create your own tool:</p> <ol> <li>Define Your Tool Class: Create a new Python class that inherits from <code>Tool</code></li> <li>Implement the Execute Method: Override the <code>execute(self, context: Context)</code> method with your business logic</li> <li>Add Helper Methods: Separate concerns by breaking down complex logic into helper methods</li> <li>Implement Error Handling: Add robust error handling for API calls, data processing, and edge cases</li> <li>Add Logging: Include appropriate logging for monitoring and debugging</li> <li>Write Tests: Create comprehensive test cases using the test file specified in <code>path_test</code></li> <li>Configure Your Tool: Add your tool to your agent's YAML configuration with appropriate parameters and any credentials required by your tool.</li> </ol>"},{"location":"core-concepts/tools/#tools-with-credentials","title":"Tools with Credentials","text":"<p>When your tool needs to interact with external services that require authentication, you'll need to use credentials or secrets. The Weni framework provides a secure way to manage these credentials through the <code>Context</code> object.</p>"},{"location":"core-concepts/tools/#how-to-access-credentials","title":"How to Access Credentials","text":"<p>Credentials are accessed through the <code>Context</code> object that is passed to your tool's <code>execute</code> method. This ensures that sensitive information is handled securely and isn't hardcoded in your tool's code.</p> <p>Here's an example of how to modify our <code>GetAddress</code> tool to use credentials for an API that requires authentication:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\n\nclass GetAddressWithAuth(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        cep = context.parameters.get(\"cep\", \"\")\n\n        api_key = context.credentials.get(\"api_key\")\n\n        address_response = self.get_address_by_cep(cep=cep, api_key=api_key)\n\n        return TextResponse(data=address_response)\n\n    def get_address_by_cep(self, cep, api_key):\n        url = f\"https://viacep.com.br/ws/{cep}/json/\"\n\n        headers = {\n            \"Authorization\": f\"Bearer {api_key}\"\n        }\n\n        response = requests.get(url, headers=headers)\n\n        return response.json()\n</code></pre>"},{"location":"core-concepts/tools/#configuring-credentials-in-your-agent-definition","title":"Configuring Credentials in Your Agent Definition","text":"<p>To make credentials available to your tool, you need to define them in your agent's YAML configuration file. Here's an example:</p> <pre><code>agents:\n  cep_agent:\n   credentials:\n      api_key:\n        label: \"API Key\"\n        placeholder: \"Api Key\"\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddressWithAuth\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre> <p>Highly Recommended: For a comprehensive understanding of how credentials work in production environments and local testing, please read the Credentials documentation page. This will help you properly manage sensitive information and understand the different approaches for development and production environments.</p>"},{"location":"core-concepts/tools/#best-practices-for-handling-credentials","title":"Best Practices for Handling Credentials","text":"<p>When working with credentials in your tools:</p> <ol> <li>Never hardcode credentials in your tool's code.</li> <li>Always access credentials through the Context object.</li> <li>Use environment variables for local development and testing.</li> <li>Implement proper error handling for cases where credentials might be missing or invalid.</li> </ol> <p>By following these practices, you can create secure tools that interact with authenticated services while keeping sensitive information protected.</p>"},{"location":"core-concepts/tools/#best-practices-for-tools","title":"Best Practices for Tools","text":"<p>When creating tools, follow these best practices:</p> <ul> <li>Single Responsibility: Each tool should have a clear, focused purpose</li> <li>Comprehensive Error Handling: Implement robust error handling for all external calls and edge cases</li> <li>Input Validation: Validate all input parameters before processing</li> <li>Security Considerations: Handle sensitive data appropriately and follow security best practices</li> <li>Testability: Design your tools to be easily testable with both unit and integration tests</li> <li>Version Control: Use a GitHub repository to version your tools, allowing you to track changes, collaborate with others, and easily roll back to previous versions if needed</li> </ul>"},{"location":"examples/book-agent/","title":"Book Agent Example","text":"<p>This example shows how to create an agent that provides detailed information about books based on the title provided by the user.</p>"},{"location":"examples/book-agent/#agent-definition","title":"Agent Definition","text":"<p>Create a file called <code>agent_definition.yaml</code>:</p> <pre><code>agents:\n    book_agent:\n      name: \"Book Agent\"\n      description: \"Expert in searching for book information\"\n      instructions:\n        - \"You are an expert in searching for detailed information about books\"\n        - \"When the user asks about a book, you should search and present the most relevant information\"\n        - \"The API returns information in English, and you should translate the description to Portuguese naturally and fluently\"\n        - \"If you can't find the book, suggest similar titles\"\n        - \"When translating the description, maintain the tone and style of the original text, adapting only to Brazilian Portuguese\"\n        - \"Provide information about authors, publisher, publication date, page count, and ratings when available\"\n        - \"You must translate the book description to Portuguese before presenting it to the user\"\n      guardrails:\n        - \"Maintain a professional and informative tone when presenting books\"\n        - \"Don't make assumptions about book content\"\n        - \"Provide accurate and verified information\"\n        - \"When translating, maintain fidelity to the original text meaning\"\n        - \"Mention when rating or page count information is not available\"\n      tools:\n      - get_books:\n          name: \"Search Books\"\n          source:\n            path: \"tools/get_books\"\n            entrypoint: \"books.GetBooks\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to search for book information\"\n          parameters:\n            - book_title:\n                description: \"book title to search for\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre>"},{"location":"examples/book-agent/#tool-implementation","title":"Tool Implementation","text":"<p>Create a file <code>tools/get_books/books.py</code>:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\nfrom datetime import datetime\n\n\nclass GetBooks(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        apiKey = context.credentials.get(\"apiKey\")\n\n        book_title = context.parameters.get(\"book_title\", \"\")\n        books_response = self.get_books_by_title(title=book_title)\n\n        # Format the response\n        items = books_response.get(\"items\", [])\n        if not items:\n            return TextResponse(data=\"Sorry, I couldn't find information about this book.\")\n\n        response_data = {\n            \"status\": \"success\",\n            \"totalResults\": len(items[:5]),\n            \"books\": []\n        }\n\n        for book in items[:5]:\n            volume_info = book.get(\"volumeInfo\", {})\n            book_data = {\n                \"id\": book.get(\"id\"),\n                \"title\": volume_info.get(\"title\"),\n                \"authors\": volume_info.get(\"authors\", []),\n                \"publisher\": volume_info.get(\"publisher\"),\n                \"publishedDate\": volume_info.get(\"publishedDate\"),\n                \"description\": volume_info.get(\"description\", \"\"),\n                \"pageCount\": volume_info.get(\"pageCount\"),\n                \"categories\": volume_info.get(\"categories\", []),\n                \"averageRating\": volume_info.get(\"averageRating\"),\n                \"ratingsCount\": volume_info.get(\"ratingsCount\"),\n                \"imageLinks\": volume_info.get(\"imageLinks\", {}),\n                \"language\": volume_info.get(\"language\"),\n                \"previewLink\": volume_info.get(\"previewLink\"),\n                \"infoLink\": volume_info.get(\"infoLink\")\n            }\n            response_data[\"books\"].append(book_data)\n\n        return TextResponse(data=response_data)\n\n    def get_books_by_title(self, title):\n        url = \"https://www.googleapis.com/books/v1/volumes\"\n        params = {\n            \"q\": title\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n</code></pre> <p>Create a file <code>tools/get_books/requirements.txt</code>:</p> <pre><code>requests==2.32.3\n</code></pre> <p>Create a file <code>tools/get_books/test_definition.yaml</code>:</p> <pre><code>tests:\n    test_1:\n        parameters:\n            book_title: \"The Hobbit\"\n</code></pre>"},{"location":"examples/book-agent/#testing-the-tool-locally","title":"Testing the Tool Locally","text":"<p>Before deploying your agent, you can test the tool locally using the <code>weni run</code> command. This allows you to verify that your tool works correctly and debug any issues.</p> <p>To test the Book Agent tool:</p> <pre><code>weni run agent_definition.yaml book_agent get_books\n</code></pre> <p>This command will execute the tests defined in the <code>test_definition.yaml</code> file and show you the output. You should see the book information for \"The Hobbit\" test case.</p> <p>If you need more detailed logs for debugging, you can add the <code>-v</code> flag:</p> <pre><code>weni run agent_definition.yaml book_agent get_books -v\n</code></pre> <p>The verbose output will show you more details about the execution process, helping you identify and fix any issues with your tool.</p>"},{"location":"examples/book-agent/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Deploy the agent:    <pre><code>weni project push agent_definition.yaml\n</code></pre></li> </ol>"},{"location":"examples/book-agent/#testing","title":"Testing","text":"<p>After deployment, you can test the agent:</p> <ol> <li>Open your project in the Weni platform</li> <li>Find the Book Agent in your agents list</li> <li>Start a conversation</li> <li>Send a book title (e.g., \"Pride and Prejudice\" or \"Harry Potter\")</li> </ol> <p>The agent will respond with detailed information about the book, including title, authors, publisher, publication date, page count, and ratings when available. The book description will be automatically translated to Portuguese. </p>"},{"location":"examples/cep-agent/","title":"CEP Agent Example","text":"<p>This example shows how to create an agent that can provide address information based on Brazilian postal codes (CEP).</p>"},{"location":"examples/cep-agent/#agent-definition","title":"Agent Definition","text":"<p>Create a file named <code>agents.yaml</code>:</p> <pre><code>agents:\n  sample_agent:\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddress\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre>"},{"location":"examples/cep-agent/#tool-implementation","title":"Tool Implementation","text":"<p>Create a file <code>tools/get_address/main.py</code>:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\n\n\nclass GetAddress(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        cep = context.parameters.get(\"cep\", \"\")\n        address_response = self.get_address_by_cep(cep=cep)\n        return TextResponse(data=address_response)\n\n    def get_address_by_cep(self, cep):\n        url = f\"https://viacep.com.br/ws/{cep}/json/\"\n        response = requests.get(url)\n        return response.json()\n</code></pre> <p>Create a file <code>tools/get_address/requirements.txt</code>:</p> <pre><code>requests==2.31.0\n</code></pre> <p>Create a file <code>tools/get_address/test_definition.yaml</code>:</p> <pre><code>tests:\n    test_1:\n        parameters:\n            cep: \"01311-000\"\n    test_2:\n        parameters:\n            cep: \"70150-900\"\n    test_3:\n        parameters:\n            cep: \"20050-090\"\n</code></pre>"},{"location":"examples/cep-agent/#testing-the-tool-locally","title":"Testing the Tool Locally","text":"<p>Before deploying your agent, you can test the tool locally using the <code>weni run</code> command. This allows you to verify that your tool works correctly and debug any issues.</p> <p>To test the CEP Agent tool:</p> <pre><code>weni run agent_definition.yaml cep_agent get_address\n</code></pre> <p>This command will execute the tests defined in the <code>test_definition.yaml</code> file and show you the output. You should see the address information for the Brazilian postal codes specified in the test cases.</p> <p>If you need more detailed logs for debugging, you can add the <code>-v</code> flag:</p> <pre><code>weni run agent_definition.yaml cep_agent get_address -v\n</code></pre> <p>This will run the test cases defined in <code>test_definition.yaml</code> and show you the output, helping you identify and fix any issues with your tool.</p>"},{"location":"examples/cep-agent/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Deploy the agent:    <pre><code>weni project push agents.yaml\n</code></pre></li> </ol>"},{"location":"examples/cep-agent/#testing","title":"Testing","text":"<p>After deployment, you can test the agent by:</p> <ol> <li>Opening your project in the Weni platform</li> <li>Finding the CEP Agent in your agents list</li> <li>Starting a conversation</li> <li>Sending a valid Brazilian postal code (e.g., \"01311-000\")</li> </ol>"},{"location":"examples/gallery/","title":"Example Gallery","text":"<ul> <li> <p> CEP Agent</p> <p>Master the Weni CLI by building a high-performance agent capable of querying Brazilian postal codes.</p> <p> Getting started</p> </li> <li> <p> Book Agent</p> <p>Create an agent that searches for book information, including title, author, description, and other details.</p> <p> Getting started</p> </li> <li> <p> News Agent</p> <p>Develop an agent that retrieves updated news about various topics through a news API.</p> <p> Getting started</p> </li> <li> <p> Movie Agent</p> <p>Implement an agent specialized in searching for movie information, with automatic translation of titles and descriptions.</p> <p> Getting started</p> </li> </ul>"},{"location":"examples/movie-agent/","title":"Movie Agent Example","text":"<p>This example shows how to create an agent that provides detailed information about movies, including title, synopsis, cast, ratings, and other relevant data.</p>"},{"location":"examples/movie-agent/#agent-definition","title":"Agent Definition","text":"<p>Create a file called <code>agent_definition.yaml</code>:</p> <pre><code>agents:\n  movie_agent:\n    credentials:\n      movies_api_key:\n        label: \"api movies\"\n        placeholder: \"movies_api_key\"\n    name: \"Movie Agent\"\n    description: \"Expert in searching for movie information\"\n    instructions:\n        - \"You are an expert in searching for detailed information about movies\"\n        - \"When the user asks about a movie, you should search and present the most relevant information\"\n        - \"If the user provides the movie title in Portuguese, you should translate it to English before searching\"\n        - \"The API returns information in English, and you should translate the overview to Portuguese naturally and fluently\"\n        - \"Keep original titles in English, but you can provide an informal translation in parentheses when relevant\"\n        - \"If you can't find the movie, suggest similar titles\"\n        - \"Remember that the search must be done in English, even if the user asks in Portuguese\"\n        - \"When translating the overview, maintain the tone and style of the original text, adapting only to Brazilian Portuguese\"\n        - \"When translating the movie title to English, use the most common and internationally recognizable name\"\n    guardrails:\n        - \"Maintain a professional and informative tone when presenting movies\"\n        - \"Don't make assumptions about movie content\"\n        - \"Provide accurate and verified information\"\n        - \"When translating, maintain fidelity to the original text meaning\"\n        - \"If there's doubt in title translation, use the most internationally known name\"\n    tools:\n    - get_movies:\n        name: \"Get Movies\"\n        source: \n          path: \"tools/get_movies\"\n          entrypoint: \"main.GetMovies\"\n          path_test: \"test_definition.yaml\"\n        description: \"Function to get movie information from TMDB API\"\n        parameters:\n            - movie_title:\n                description: \"movie title to search for (will be translated to English if in Portuguese)\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre>"},{"location":"examples/movie-agent/#tool-implementation","title":"Tool Implementation","text":"<p>Create a file <code>tools/get_movies/main.py</code>:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\nfrom datetime import datetime\n\nclass GetMovies(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        movie_title = context.parameters.get(\"movie_title\", \"\")\n        api_key = context.credentials.get(\"movies_api_key\")\n\n        # Search for movies by title\n        movies_response = self.search_movies_by_title(title=movie_title, api_key=api_key)\n\n        # Format the response\n        results = movies_response.get(\"results\", [])\n        if not results:\n            return TextResponse(data=\"Sorry, I couldn't find information about this movie.\")\n\n        # Get the first (most relevant) movie\n        movie_id = results[0].get(\"id\")\n\n        # Get detailed information about the movie\n        movie_details = self.get_movie_details(movie_id=movie_id, api_key=api_key)\n\n        response_data = {\n            \"id\": movie_details.get(\"id\"),\n            \"title\": movie_details.get(\"title\"),\n            \"original_title\": movie_details.get(\"original_title\"),\n            \"tagline\": movie_details.get(\"tagline\"),\n            \"overview\": movie_details.get(\"overview\"),\n            \"release_date\": movie_details.get(\"release_date\"),\n            \"runtime\": movie_details.get(\"runtime\"),\n            \"vote_average\": movie_details.get(\"vote_average\"),\n            \"vote_count\": movie_details.get(\"vote_count\"),\n            \"genres\": movie_details.get(\"genres\", []),\n            \"poster_path\": f\"https://image.tmdb.org/t/p/w500{movie_details.get('poster_path')}\" if movie_details.get(\"poster_path\") else None,\n            \"backdrop_path\": f\"https://image.tmdb.org/t/p/original{movie_details.get('backdrop_path')}\" if movie_details.get(\"backdrop_path\") else None\n        }\n\n        return TextResponse(data=response_data)\n\n    def search_movies_by_title(self, title, api_key):\n        url = \"https://api.themoviedb.org/3/search/movie\"\n        params = {\n            \"api_key\": api_key,\n            \"query\": title,\n            \"language\": \"en-US\",\n            \"page\": 1\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n\n    def get_movie_details(self, movie_id, api_key):\n        url = f\"https://api.themoviedb.org/3/movie/{movie_id}\"\n        params = {\n            \"api_key\": api_key,\n            \"language\": \"en-US\",\n            \"append_to_response\": \"credits,similar\"\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n</code></pre> <p>Create a file <code>tools/get_movies/requirements.txt</code>:</p> <pre><code>requests==2.32.3\n</code></pre> <p>Create a file <code>tools/get_movies/test_definition.yaml</code>:</p> <pre><code>tests:\n    test_1:\n        credentials:\n            movies_api_key: \"your_api_key_here\"\n        parameters:\n            movie_title: \"The Matrix\"\n</code></pre>"},{"location":"examples/movie-agent/#getting-credentials","title":"Getting Credentials","text":"<p>For this agent to work properly, you'll need to get an API key from The Movie Database (TMDB):</p> <ol> <li>Visit the TMDB website</li> <li>Register for a free account</li> <li>Access the API section in your account and request an API key</li> <li>Copy your API key</li> <li>When deploying the agent, you'll need to provide this key as a credential</li> </ol>"},{"location":"examples/movie-agent/#testing-the-tool-locally","title":"Testing the Tool Locally","text":"<p>Before deploying your agent, you can test the tool locally using the <code>weni run</code> command. This allows you to verify that your tool works correctly and debug any issues.</p> <p>Since this tool requires credentials, create a <code>.env</code> file in the tool folder with your TMDB API key (e.g., <code>tools/get_movies/.env</code>):</p> <pre><code>movies_api_key=your_actual_tmdb_api_key_here\n</code></pre> <p>To test the Movie Agent tool:</p> <pre><code>weni run agent_definition.yaml movie_agent get_movies\n</code></pre> <p>This command will execute the tests defined in the <code>test_definition.yaml</code> file and show you the output. The CLI will automatically pick up the credentials from the tool folder <code>.env</code> file and make them available to your tool during execution.</p> <p>If you need more detailed logs for debugging, you can add the <code>-v</code> flag:</p> <pre><code>weni run agent_definition.yaml movie_agent get_movies -v\n</code></pre> <p>The verbose output will show you more details about the execution process, including API requests and responses, helping you identify and fix any issues with your tool.</p>"},{"location":"examples/movie-agent/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Deploy the agent:    <pre><code>weni project push agent_definition.yaml\n</code></pre></li> </ol>"},{"location":"examples/movie-agent/#testing","title":"Testing","text":"<p>After deployment, you can test the agent:</p> <ol> <li>Open your project in the Weni platform</li> <li>Find the Movie Agent in your agents list</li> <li>Provide the TMDB API key in the credential settings</li> <li>Start a conversation</li> <li>Send a movie title in Portuguese or English (e.g., \"The Godfather\" or \"Pulp Fiction\")</li> </ol> <p>The agent will respond with detailed information about the movie, including title, synopsis (translated to Portuguese), release date, runtime, genres, ratings, and links to posters. If the title is provided in Portuguese, the agent will automatically translate it to perform the search. </p>"},{"location":"examples/news-agent/","title":"News Agent Example","text":"<p>This example shows how to create an agent that provides up-to-date news on various topics through a news API.</p>"},{"location":"examples/news-agent/#agent-definition","title":"Agent Definition","text":"<p>Create a file called <code>agent_definition.yaml</code>:</p> <pre><code>agents:\n    news_agent:\n        credentials:\n            apiKey:\n                label: \"API Key\"\n                placeholder: \"apiKey\"\n        name: \"News Agent\"\n        description: \"Expert in searching and providing news about any topic\"\n        instructions:\n            - \"You are an expert in searching and providing updated news about any topic\"\n            - \"When the user asks about a topic, you should search and present the most relevant news\"\n            - \"Always be helpful and provide brief context about the news found\"\n            - \"If you can't find news about the topic, suggest related topics\"\n            - \"Always use english to answer the user and be polite\"\n        guardrails:\n            - \"Maintain a professional and impartial tone when presenting news\"\n            - \"Don't make assumptions or speculations about the news\"\n            - \"Avoid sharing sensationalist or unverified news\"\n        tools:\n        - get_news:\n            name: \"Get News\"\n            source:\n                path: \"tools/get_news\"\n                entrypoint: \"main.GetNews\"\n                path_test: \"test_definition.yaml\"\n            description: \"Function to get the latest news from NewsAPI\"\n            parameters:\n                - topic:\n                    description: \"Topic to search for news\"\n                    type: \"string\"\n                    required: true\n                    contact_field: true\n</code></pre>"},{"location":"examples/news-agent/#tool-implementation","title":"Tool Implementation","text":"<p>Create a file <code>tools/get_news/main.py</code>:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\nfrom datetime import datetime\n\n\nclass GetNews(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        apiKey = context.credentials.get(\"apiKey\")\n\n        topic = context.parameters.get(\"topic\", \"\")\n        news_response = self.get_news_by_topic(topic=topic, apiKey=apiKey)\n\n        # Format the response\n        articles = news_response.get(\"articles\", [])\n        if not articles:\n            return TextResponse(data=\"Sorry, I couldn't find any news on this topic.\")\n\n        response_data = {\n            \"status\": news_response.get(\"status\"),\n            \"totalResults\": len(articles[:10]),\n            \"articles\": []\n        }\n\n        # Get only the first 10 articles\n        for article in articles[:10]:\n            article_data = {\n                \"source\": article.get(\"source\", {}),\n                \"author\": article.get(\"author\"),\n                \"title\": article.get(\"title\"),\n                \"description\": article.get(\"description\"),\n                \"url\": article.get(\"url\"),\n                \"urlToImage\": article.get(\"urlToImage\"),\n                \"publishedAt\": article.get(\"publishedAt\"),\n                \"content\": article.get(\"content\")\n            }\n            response_data[\"articles\"].append(article_data)\n\n        return TextResponse(data=response_data)\n\n    def get_news_by_topic(self, topic, apiKey):\n        url = f\"https://newsapi.org/v2/everything\"\n        params = {\n            \"q\": topic,\n            \"sortBy\": \"popularity\",\n            \"apiKey\": apiKey,\n            \"language\": \"en\"\n        }\n        response = requests.get(url, params=params)\n        return response.json()\n</code></pre> <p>Create a file <code>tools/get_news/requirements.txt</code>:</p> <pre><code>requests==2.32.3\n</code></pre> <p>Create a file <code>tools/get_news/test_definition.yaml</code>:</p> <pre><code>tests:\n    test_1:\n        credentials:\n            apiKey: \"your_api_key_here\"\n        parameters:\n            topic: \"technology\"\n</code></pre>"},{"location":"examples/news-agent/#getting-credentials","title":"Getting Credentials","text":"<p>For this agent to work properly, you'll need to get an API key from News API:</p> <ol> <li>Visit the News API website</li> <li>Register for a free account</li> <li>Copy your API key from your account</li> <li>When deploying the agent, you'll need to provide this key as a credential</li> </ol>"},{"location":"examples/news-agent/#testing-the-tool-locally","title":"Testing the Tool Locally","text":"<p>Before deploying your agent, you can test the tool locally using the <code>weni run</code> command. This allows you to verify that your tool works correctly and debug any issues.</p> <p>Since this tool requires credentials, create a <code>.env</code> file in the tool folder with your API key (e.g., <code>tools/get_news/.env</code>):</p> <pre><code>apiKey=your_actual_news_api_key_here\n</code></pre> <p>To test the News Agent tool:</p> <pre><code>weni run agent_definition.yaml news_agent get_news\n</code></pre> <p>This command will execute the tests defined in the <code>test_definition.yaml</code> file and show you the output. The CLI will automatically pick up the credentials from the tool folder <code>.env</code> file and make them available to your tool during execution.</p> <p>If you need more detailed logs for debugging, you can add the <code>-v</code> flag:</p> <pre><code>weni run agent_definition.yaml news_agent get_news -v\n</code></pre> <p>The verbose output will show you more details about the execution process, helping you identify and fix any issues with your tool.</p>"},{"location":"examples/news-agent/#deployment-steps","title":"Deployment Steps","text":"<ol> <li>Deploy the agent:    <pre><code>weni project push agent_definition.yaml\n</code></pre></li> </ol>"},{"location":"examples/news-agent/#testing","title":"Testing","text":"<p>After deployment, you can test the agent:</p> <ol> <li>Open your project in the Weni platform</li> <li>Find the News Agent in your agents list</li> <li>Provide the News API key in the credential settings</li> <li>Start a conversation</li> <li>Send a topic to search for news (e.g., \"technology\", \"sports\", \"business\")</li> </ol> <p>The agent will respond with the most relevant news about the requested topic, including title, description, source, author, publication date, and links to the full article. </p>"},{"location":"getting-started/authentication/","title":"Authentication Guide","text":"<p>Authentication is one of the most important steps to start developing your agents. To authenticate, you first need to have an account on the Weni platform. You can create your account here: Weni Platform.</p>"},{"location":"getting-started/authentication/#authentication-process","title":"Authentication Process","text":"<p>Once you have your Weni account, it's time to authenticate using the CLI. Run the following command:</p> <pre><code>weni login\n</code></pre> <p>This command will open a browser window where you can login with your Weni account.</p> <p></p> <p>After logging in, you will be redirected to the CLI and you will be authenticated with a success message.</p> <p>Login Successfully</p> <p>Now you are authenticated and you can start using the Weni CLI with your projects.</p> <p>The local callback server listens on <code>http://localhost:50051/sso-callback</code>. If your browser does not open automatically, copy the URL shown in the terminal and complete the login in your browser.</p>"},{"location":"getting-started/installation/","title":"Installation Guide","text":"<p>This guide will help you install the Weni CLI tool on your system. We provide two installation methods: a quick installation via pip and a manual installation using Poetry for development purposes.</p>"},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python &gt;= 3.10</li> <li>Poetry &gt;= 1.8.5</li> </ul>"},{"location":"getting-started/installation/#installation","title":"Installation","text":""},{"location":"getting-started/installation/#install-via-pip","title":"Install via PIP","text":"<p>You can install the CLI directly using pip:</p> <pre><code>pip install weni-cli\n</code></pre>"},{"location":"getting-started/installation/#manual-installation","title":"Manual Installation","text":"<ol> <li> <p>Clone the repository: <pre><code>git clone https://github.com/weni-ai/weni-cli.git\ncd weni-cli\n</code></pre></p> </li> <li> <p>Install dependencies and make the CLI executable: <pre><code>poetry shell\npoetry install\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify that Weni CLI is properly installed, type the command <code>weni</code> in your terminal:</p> <pre><code>weni\n</code></pre> <p>If everything went well, your terminal should display something like this:</p> <p></p>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter any issues:</p> <ol> <li>Check our GitHub Issues</li> <li>Create a new issue with:</li> <li>Your operating system</li> <li>Python version (<code>python --version</code>)</li> <li>Error message</li> <li>Steps to reproduce</li> </ol>"},{"location":"getting-started/quickstart-developers/","title":"Quick Start for Developers","text":"<p>This guide is designed for developers who want full control over agent creation and customization with Weni CLI.</p>"},{"location":"getting-started/quickstart-developers/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li>Installed Weni CLI</li> <li> <p>Follow the installation guide</p> </li> <li> <p>Created a Weni Account</p> </li> <li>Sign up at Weni.ai</li> <li> <p>Ensure you have access to at least one project</p> </li> <li> <p>Development Environment</p> </li> <li>A code editor of your choice</li> <li>Basic understanding of YAML and Python</li> </ol>"},{"location":"getting-started/quickstart-developers/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"getting-started/quickstart-developers/#1-login-and-project-setup","title":"1. Login and Project Setup","text":"<ol> <li> <p>Login to Weni <pre><code>weni login\n</code></pre></p> </li> <li> <p>List Your Projects <pre><code>weni project list\n</code></pre></p> </li> <li> <p>Select Your Project <pre><code>weni project use your-project-uuid\n</code></pre></p> </li> <li> <p>Verify Current Project <pre><code>weni project current\n</code></pre></p> </li> </ol>"},{"location":"getting-started/quickstart-developers/#2-use-weni-init","title":"2. Use Weni Init","text":"<pre><code>weni init\n</code></pre> <p>This command will create a new agent with the name <code>cep_agent</code> and the tool <code>get_address</code>.</p>"},{"location":"getting-started/quickstart-developers/#21-agent-configuration","title":"2.1. Agent Configuration","text":"<p>Create a file named <code>agent_definition.yaml</code> with your agent configuration:</p> <pre><code>agents:\n  sample_agent:\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddress\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n</code></pre>"},{"location":"getting-started/quickstart-developers/#understanding-the-source-configuration","title":"Understanding the Source Configuration","text":"<p>In the YAML above, note the <code>source</code> field:</p> <pre><code>source: \n  path: \"tools/get_address\"\n  entrypoint: \"main.GetAddress\"\n</code></pre> <ul> <li>path: Specifies the directory containing your tool implementation</li> <li><code>tools/get_address</code> means a folder named <code>get_address</code> inside a <code>tools</code> directory</li> <li> <p>This is where your Python files and requirements.txt should be located</p> </li> <li> <p>entrypoint: Tells the system which class to use</p> </li> <li><code>main.GetAddress</code> means:<ul> <li>Find a file named <code>main.py</code> in the path directory</li> <li>Use the <code>GetAddress</code> class inside that file</li> <li>The class must inherit from the <code>Tool</code> base class</li> </ul> </li> </ul> <p>Your project structure should look like: <pre><code>my-agent-project/\n\u251c\u2500\u2500 agent_definition.yaml\n\u2514\u2500\u2500 tools/\n    \u2514\u2500\u2500 get_address/\n        \u251c\u2500\u2500 main.py             # Contains GetAddress class\n        \u2514\u2500\u2500 requirements.txt    # Dependencies\n</code></pre></p>"},{"location":"getting-started/quickstart-developers/#22-tool-implementation","title":"2.2. Tool Implementation","text":"<ol> <li> <p>Create Tool Directory <pre><code>mkdir -p tools/get_address\ncd tools/get_address\n</code></pre></p> </li> <li> <p>Create Tool Class    Create a file <code>tools/get_address/main.py</code>:</p> </li> </ol> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\n\n\nclass GetAddress(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        cep = context.parameters.get(\"cep\", \"\")\n        address_response = self.get_address_by_cep(cep=cep)\n        return TextResponse(data=address_response)\n\n    def get_address_by_cep(self, cep):\n        url = f\"https://viacep.com.br/ws/{cep}/json/\"\n        response = requests.get(url)\n        return response.json()\n</code></pre> <p>Important:     - The class name <code>GetAddress</code> must match the class name in your entrypoint    - The file name <code>main.py</code> must match the file name in your entrypoint    - The class must inherit from <code>Tool</code> and implement the <code>execute</code> method</p> <ol> <li>Create Requirements File    Create a <code>requirements.txt</code> file:</li> </ol> <pre><code>requests==2.32.3\n</code></pre> <ol> <li>(Optional) Add credentials and globals files</li> </ol> <p>Place these files in <code>tools/get_address/</code> if needed during local runs:</p> <pre><code># .env\napi_key=your-development-api-key\n</code></pre> <pre><code># .globals\nBASE_URL=https://api.example.com\n</code></pre>"},{"location":"getting-started/quickstart-developers/#3-deploy-agent","title":"3. Deploy Agent","text":"<pre><code>weni project push agent_definition.yaml\n</code></pre>"},{"location":"getting-started/quickstart-developers/#advanced-configuration","title":"Advanced Configuration","text":""},{"location":"getting-started/quickstart-developers/#custom-parameters","title":"Custom Parameters","text":"<p>You can add more parameters to your tools:</p> <pre><code>parameters:\n  - format:\n      description: \"Response format (json or text)\"\n      type: \"string\"\n      required: false\n      default: \"json\"\n</code></pre>"},{"location":"getting-started/quickstart-developers/#multiple-tools","title":"Multiple Tools","text":"<p>Agents can have multiple tools:</p> <pre><code>tools:\n  - get_address:\n      # tool definition\n  - validate_cep:\n      # another tool definition\n</code></pre>"},{"location":"getting-started/quickstart-non-developers/","title":"Quick Start for Non-Developers","text":"<p>This guide is designed for those who are new to coding or prefer a simplified approach to creating agents with Weni CLI.</p>"},{"location":"getting-started/quickstart-non-developers/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, make sure you have:</p> <ol> <li>Installed Weni CLI</li> <li> <p>Follow the installation guide</p> </li> <li> <p>Created a Weni Account</p> </li> <li>Sign up at Weni.ai</li> <li>Ensure you have access to at least one project</li> </ol>"},{"location":"getting-started/quickstart-non-developers/#step-by-step-guide","title":"Step-by-Step Guide","text":""},{"location":"getting-started/quickstart-non-developers/#1-login-to-weni","title":"1. Login to Weni","text":"<pre><code>weni login\n</code></pre> <p>This will open your browser for authentication. After successful login, you can close the browser tab.</p>"},{"location":"getting-started/quickstart-non-developers/#2-list-your-projects","title":"2. List Your Projects","text":"<pre><code>weni project list\n</code></pre> <p>This command will show all projects you have access to. Note down the UUID of the project you want to work with.</p>"},{"location":"getting-started/quickstart-non-developers/#3-select-your-project","title":"3. Select Your Project","text":"<pre><code>weni project use your-project-uuid\n</code></pre> <p>Replace <code>your-project-uuid</code> with the UUID from the project list.</p>"},{"location":"getting-started/quickstart-non-developers/#4-verify-current-project","title":"4. Verify Current Project","text":"<pre><code>weni project current\n</code></pre> <p>This ensures you're working with the correct project.</p>"},{"location":"getting-started/quickstart-non-developers/#5-create-a-simple-agent","title":"5. Create a Simple Agent","text":"<p>You can create a simple agent without writing any code by using our templates:</p> <pre><code>weni init\n</code></pre> <p>This command will: 1. Create the necessary folder structure 2. Generate a basic agent configuration 3. Set up a pre-built CEP tool</p>"},{"location":"getting-started/quickstart-non-developers/#6-deploy-your-agent","title":"6. Deploy Your Agent","text":"<pre><code>weni project push\n</code></pre> <p>That's it! Your agent is now deployed and ready to use.</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you get started with Weni CLI by creating your first agent. We'll create a simple CEP (Brazilian postal code) agent that can provide addresses based on postal codes.</p>"},{"location":"getting-started/quickstart/#prerequisites","title":"Prerequisites","text":"<ol> <li>Weni CLI installed</li> <li> <p>Verify with <code>weni</code> command</p> </li> <li> <p>Weni Platform account</p> </li> <li>Account created at Weni.ai</li> <li>At least one project in your account</li> </ol>"},{"location":"getting-started/quickstart/#choose-your-path","title":"Choose Your Path","text":"<p>Based on your experience level, choose one of the following guides:</p> <ul> <li> <p> For Non-Developers</p> <ul> <li>Simplified approach</li> <li>Uses pre-built templates</li> <li>Minimal coding required</li> </ul> </li> <li> <p> For Developers</p> <ul> <li>Full control over agent creation</li> <li>Custom tool development</li> <li>Advanced configuration options</li> </ul> </li> </ul>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>How to use Credentials<ul> <li>Credentials guide</li> </ul> </li> </ul>"},{"location":"run/logs/","title":"Logs","text":"<p>Fetch and filter execution logs for a specific agent tool.</p>"},{"location":"run/logs/#usage","title":"Usage","text":"<pre><code>weni logs --agent &lt;agent_key&gt; --tool &lt;tool_key&gt; [--start-time ISO8601] [--end-time ISO8601] [--pattern TEXT]\n</code></pre>"},{"location":"run/logs/#options","title":"Options","text":"<ul> <li><code>--agent, -a</code> (required): Agent key in your definition (e.g. <code>cep_agent</code>).</li> <li><code>--tool, -t</code> (required): Tool key (e.g. <code>get_address</code>).</li> <li><code>--start-time, -s</code> (optional): ISO 8601 datetime. Examples:</li> <li><code>2024-01-01T00:00:00</code></li> <li><code>2024-01-01T00:00:00.000Z</code></li> <li><code>--end-time, -e</code> (optional): ISO 8601 datetime, same formats as start.</li> <li><code>--pattern, -p</code> (optional): Simple substring filter. Regex (e.g. <code>%...%</code>) is not supported.</li> </ul> <p>Supported datetime formats include:</p> <ul> <li><code>YYYY-MM-DDTHH:MM:SS</code></li> <li><code>YYYY-MM-DDTHH:MM:SS.sss</code></li> <li>With timezone suffix: <code>Z</code>, <code>+00:00</code>, etc.</li> </ul>"},{"location":"run/logs/#pagination","title":"Pagination","text":"<p>If more logs are available, you'll be prompted to fetch more. Choose <code>p</code> to continue or <code>q</code> to stop.</p>"},{"location":"run/logs/#examples","title":"Examples","text":"<pre><code># Basic\nweni logs -a cep_agent -t get_address\n\n# With time range\nweni logs -a cep_agent -t get_address -s 2024-01-01T00:00:00 -e 2024-01-01T23:59:59\n\n# With simple pattern\nweni logs -a cep_agent -t get_address -p error\n</code></pre>"},{"location":"run/tool-run/","title":"Tool Test Run","text":"<p>Tool Run is a scalable way to build your tool and test it in real-time. With this feature, it's simple to debug problems and create a tool that is both scalable and performant at the same time.</p>"},{"location":"run/tool-run/#what-is-required-to-run-a-tool","title":"What is required to run a tool?","text":"<p>First, you need to have your tool. If you don't know how to create a tool or still have questions about this subject, you can read the tools page Tools.</p> <p>Next, you need to write your test. Let's take the following tool as an example:</p> <pre><code>tools:\n  - get_address:\n      name: \"Get Address\"\n      source: \n        path: \"tools/get_address\"\n        entrypoint: \"main.GetAddressWithAuth\"\n        path_test: \"test_definition.yaml\"\n      description: \"Function to get the address from the postal code\"\n      parameters:\n        - cep:\n            description: \"postal code of a place\"\n            type: \"string\"\n            required: true\n            contact_field: true\n</code></pre> <p>Notice that my tool has a specific parameter called \"cep\". Therefore, the expected input for this tool to be processed is a postal code. This way, I'll create a test file for this tool in the same directory as the specific tool code.</p> <p>My test file would look something like this:</p> <p>test_definition.yaml:</p> <pre><code>tests:\n    test_1:\n        parameters:\n            cep: \"57160000\"\n    test_2:\n        parameters:\n            cep: \"57038-635\"\n    test_3:\n        parameters:\n            cep: \"57160-000\"\n</code></pre> <p>Make sure that <code>path_test</code> corresponds to the correct path of your tool test.</p> <p>It's also important to note that if your tool uses any external libraries, you must include a <code>requirements.txt</code> file in the same directory as your tool code. This file should list all the dependencies needed for your tool to run properly.</p>"},{"location":"run/tool-run/#how-to-run-a-test","title":"How to run a test?","text":"<p>Following the previous steps, we can now run a test, but how?</p> <p>The command works as follows:</p> <pre><code>weni run [agent_definition_file] [agent_key] [tool_key] [-f FILE] [-v]\n</code></pre> <p>A practical example of the command considering the agent definition that was mentioned above would be:</p> <pre><code>weni run agent_definition.yaml cep_agent get_address\n</code></pre> <p>Result:</p> <p></p> <p>There is also a variation of this command in case you need to include ways to debug the code. You can add the <code>-v</code> argument at the end of the command to get more detailed logs of your tool, like this:</p> <pre><code>weni run agent_definition.yaml cep_agent get_address -v\n</code></pre>"},{"location":"run/tool-run/#choosing-a-test-file","title":"Choosing a test file","text":"<ul> <li>Use <code>-f/--file</code> to specify a test definition YAML located in the tool folder.</li> <li>If <code>-f</code> is omitted, the CLI looks for <code>test_definition.yaml</code> in the tool's <code>source.path</code> directory.</li> <li>You can also set <code>source.path_test</code> in your agent definition to point to a custom test file; when present, the CLI uses that path by default.</li> </ul>"},{"location":"run/tool-run/#credentials-and-globals-discovery","title":"Credentials and globals discovery","text":"<p>For development, the CLI will read optional files from the tool directory:</p> <ul> <li><code>.env</code> for credentials exposed to your tool via <code>context.credentials</code></li> <li><code>.globals</code> for key/value pairs exposed via <code>context.globals</code></li> </ul> <p>Both files follow a simple <code>KEY=VALUE</code> per line format.</p> <p>Result:</p> <p></p>"},{"location":"run/tool-run/#running-tools-that-require-credentials","title":"Running Tools That Require Credentials","text":"<p>When your tool needs to interact with external services that require authentication, you'll need to provide credentials during testing. The official method for handling credentials with weni run is using your agent definition and a .env file.</p>"},{"location":"run/tool-run/#using-agent-definition-and-env-file","title":"Using Agent Definition and .env File","text":"<p>This approach mimics how credentials work in production, making your local development environment consistent with deployment.</p> <p>First, update your agent definition to include credentials:</p> <pre><code>agents:\n  cep_agent:\n    credentials:\n      api_key:\n        label: \"API Key\"\n        placeholder: \"Api Key\"\n    name: \"CEP Agent\"\n    description: \"Weni's CEP agent\"\n    instructions:\n      - \"You are an expert in providing addresses to the user based on a postal code provided by the user\"\n      - \"The user will send a ZIP code (postal code) and you must provide the address corresponding to this code.\"\n    guardrails:\n      - \"Don't talk about politics, religion or any other sensitive topic. Keep it neutral.\"\n    tools:\n      - get_address:\n          name: \"Get Address\"\n          source: \n            path: \"tools/get_address\"\n            entrypoint: \"main.GetAddressWithAuth\"\n            path_test: \"test_definition.yaml\"\n          description: \"Function to get the address from the postal code\"\n          parameters:\n            - cep:\n                description: \"postal code of a place\"\n                type: \"string\"\n                required: true\n                contact_field: true\n</code></pre> <p>Then, create a <code>.env</code> file inside the tool folder (e.g., <code>tools/get_address/.env</code>) with the actual credential values:</p> <pre><code>api_key=your_actual_api_key_here\n</code></pre> <p>Now you can run your tool test with credentials using the same command:</p> <pre><code>weni run agent_definition.yaml cep_agent get_address\n</code></pre> <p>The CLI will automatically pick up the credentials from the tool folder <code>.env</code> file and make them available to your tool during execution.</p>"},{"location":"run/tool-run/#accessing-credentials-in-your-tool-code","title":"Accessing Credentials in Your Tool Code","text":"<p>Your tool code should access credentials through the <code>Context</code> object as shown below:</p> <pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\nimport requests\n\nclass GetAddressWithAuth(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Get parameters from context\n        cep = context.parameters.get(\"cep\", \"\")\n\n        # Get credentials from context\n        api_key = context.credentials.get(\"api_key\")\n\n        address_response = self.get_address_by_cep(cep=cep, api_key=api_key)\n\n        return TextResponse(data=address_response)\n\n    def get_address_by_cep(self, cep, api_key):\n        url = f\"https://viacep.com.br/ws/{cep}/json/\"\n\n        headers = {\n            \"Authorization\": f\"Bearer {api_key}\"\n        }\n\n        response = requests.get(url, headers=headers)\n\n        return response.json()\n</code></pre> <p>The key line is <code>api_key = context.credentials.get(\"api_key\")</code>, which retrieves the credential value that was defined in your agent definition and stored in your tool folder <code>.env</code> file.</p> <p>Important: Never hardcode credentials in your tool code. Always access them through the Context object to ensure your code remains secure and works consistently across different environments.</p>"},{"location":"user-guide/agents/","title":"Working with Agents","text":"<p>Learn how to create, configure, and deploy AI agents using Weni CLI.</p>"},{"location":"user-guide/agents/#agent-definition-file","title":"Agent Definition File","text":"<p>Agents are defined using YAML files. Here's the basic structure:</p> <pre><code>agents:\n   agent_id:\n      name: \"Agent Name\"\n      description: \"Agent Description\"\n      instructions:\n         - \"Instruction 1\"\n         - \"Instruction 2\"\n      guardrails:\n         - \"Guardrail 1\"\n      tools:\n         - tool_name:\n            name: \"Tool Name\"\n            source:\n               path: \"tools/tool_name\"\n               entrypoint: \"main.ToolClass\"\n            description: \"Tool Description\"\n            parameters:\n               - param_name:\n                  description: \"Parameter Description\"\n                  type: \"string\"\n                  required: true\n                  contact_field: true\n</code></pre>"},{"location":"user-guide/agents/#key-components","title":"Key Components","text":"<ol> <li>Agent ID</li> <li>Unique identifier for your agent</li> <li> <p>Used internally by the system</p> </li> <li> <p>Basic Information</p> </li> <li><code>name</code>: Display name (max 55 characters)</li> <li> <p><code>description</code>: Brief description of the agent's purpose</p> </li> <li> <p>Instructions</p> </li> <li>Guide the agent's behavior</li> <li>Minimum 40 characters each</li> <li> <p>Should be clear and specific</p> </li> <li> <p>Guardrails</p> </li> <li>Define boundaries and limitations</li> <li> <p>Prevent unwanted behavior</p> </li> <li> <p>Tools</p> </li> <li>Custom functionalities</li> <li>Implemented as Python classes using the Weni SDK</li> </ol>"},{"location":"user-guide/agents/#tool-source-configuration","title":"Tool Source Configuration","text":"<p>The <code>source</code> field is critical for locating and executing your tool:</p> <pre><code>source:\n  path: \"tools/tool_name\"\n  entrypoint: \"main.ToolClass\"\n</code></pre> <ul> <li>path: Points to the directory containing your tool implementation</li> <li>Example: <code>tools/get_address</code> refers to a folder named <code>get_address</code> inside a <code>tools</code> directory</li> <li> <p>This folder should contain your Python modules and requirements.txt</p> </li> <li> <p>entrypoint: Specifies which class to use in which file</p> </li> <li>Format: <code>filename.ClassName</code></li> <li>Example: <code>main.GetAddress</code> means:<ul> <li>Look for a file named <code>main.py</code> in the path directory</li> <li>Find a class named <code>GetAddress</code> inside that file</li> <li>This class must inherit from the <code>Tool</code> class</li> </ul> </li> </ul> <p>Your directory structure should look like: <pre><code>project/\n\u251c\u2500\u2500 agents.yaml\n\u2514\u2500\u2500 tools/\n    \u2514\u2500\u2500 get_address/\n        \u251c\u2500\u2500 main.py             # Contains GetAddress class\n        \u2514\u2500\u2500 requirements.txt    # Dependencies\n</code></pre></p>"},{"location":"user-guide/agents/#creating-tools","title":"Creating Tools","text":""},{"location":"user-guide/agents/#tool-implementation-structure","title":"Tool Implementation Structure","text":"<pre><code>from weni import Tool\nfrom weni.context import Context\nfrom weni.responses import TextResponse\n\nclass ToolName(Tool):\n    def execute(self, context: Context) -&gt; TextResponse:\n        # Extract parameters\n        parameters = context.parameters\n        param_value = parameters.get(\"param_name\", \"\")\n\n        # Process the request\n        result = self.process_request(param_value)\n\n        # Return response\n        return TextResponse(data=result)\n\n    def process_request(self, param_value):\n        # Your business logic here\n        return {\"key\": \"value\"}\n</code></pre>"},{"location":"user-guide/agents/#important-requirements","title":"Important Requirements","text":"<ul> <li>The class must inherit from <code>Tool</code></li> <li>The class must implement the <code>execute</code> method</li> <li>The class name must match the class name in your entrypoint</li> </ul>"},{"location":"user-guide/agents/#deploying-agents","title":"Deploying Agents","text":""},{"location":"user-guide/agents/#push-command","title":"Push Command","text":"<p>Deploy your agent using:</p> <pre><code>weni project push agents.yaml\n</code></pre> <p>The command: 1. Validates your YAML 2. Uploads tools 3. Creates/updates the agent</p>"},{"location":"user-guide/agents/#deployment-best-practices","title":"Deployment Best Practices","text":"<ol> <li>Version Control</li> <li>Keep agent definitions in version control</li> <li> <p>Document changes</p> </li> <li> <p>Testing</p> </li> <li>Test locally when possible</li> <li>Start with staging environment</li> <li> <p>Verify all tools work</p> </li> <li> <p>Organization</p> </li> <li>Use clear file names</li> <li>Keep related files together</li> <li>Document dependencies</li> </ol>"},{"location":"user-guide/agents/#advanced-topics","title":"Advanced Topics","text":""},{"location":"user-guide/agents/#parameter-types","title":"Parameter Types","text":"<p>Available parameter types: - <code>string</code> - <code>number</code> - <code>integer</code> - <code>boolean</code> - <code>array</code></p>"},{"location":"user-guide/agents/#response-formats","title":"Response Formats","text":"<p>Tools can return: - Text responses via <code>TextResponse</code> - Structured data  - Error messages</p>"},{"location":"user-guide/agents/#error-handling","title":"Error Handling","text":"<p>Your tools should: 1. Validate inputs 2. Handle exceptions gracefully 3. Return meaningful error messages</p>"},{"location":"user-guide/agents/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/agents/#common-issues","title":"Common Issues","text":"<ol> <li>Deployment Failures</li> <li>Check YAML syntax</li> <li>Verify tool paths</li> <li> <p>Confirm project selection</p> </li> <li> <p>Tool Errors</p> </li> <li>Verify tool entrypoint (class name)</li> <li>Test tool class locally</li> <li>Check parameter handling in context</li> <li> <p>Verify API endpoints</p> </li> <li> <p>Agent Behavior</p> </li> <li>Review instructions</li> <li>Check guardrails</li> <li>Test with various inputs</li> </ol>"},{"location":"user-guide/agents/#best-practices","title":"Best Practices","text":"<ol> <li>Development Flow</li> <li>Develop locally</li> <li>Test in staging</li> <li> <p>Deploy to production</p> </li> <li> <p>Monitoring</p> </li> <li>Keep deployment logs</li> <li>Monitor tool performance</li> <li> <p>Track user interactions</p> </li> <li> <p>Updates</p> </li> <li>Plan changes carefully</li> <li>Test updates thoroughly</li> <li>Document modifications</li> </ol>"},{"location":"user-guide/authentication/","title":"Authentication","text":"<p>Learn how to authenticate with Weni CLI and manage your credentials.</p>"},{"location":"user-guide/authentication/#login-process","title":"Login Process","text":"<p>Weni CLI uses OAuth2 for authentication. When you run the login command:</p> <pre><code>weni login\n</code></pre> <p>The following happens:</p> <ol> <li>A local web server starts on your machine</li> <li>Your default browser opens to the Weni login page</li> <li>After successful login, you're redirected back to the local server</li> <li>The CLI receives and stores your authentication token</li> </ol> <p>By default, the local server listens on <code>http://localhost:50051/sso-callback</code>.</p>"},{"location":"user-guide/authentication/#token-storage","title":"Token Storage","text":"<p>Your authentication token is stored securely in your home directory. Never share or expose your authentication information.</p>"},{"location":"user-guide/authentication/#token-refresh","title":"Token Refresh","text":"<p>If an API request returns an authentication error, the CLI will prompt you to login again. Run <code>weni login</code> to obtain a new token, or set a different account.</p>"},{"location":"user-guide/authentication/#logout","title":"Logout","text":"<p>To logout and remove your authentication:</p> <ol> <li>Delete your configuration file</li> <li>Run <code>weni login</code> again to authenticate with different credentials</li> </ol>"},{"location":"user-guide/authentication/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/authentication/#common-issues","title":"Common Issues","text":"<ol> <li>Browser Doesn't Open</li> <li>Use the URL displayed in the terminal</li> <li> <p>Check if you have a default browser configured</p> </li> <li> <p>Authentication Failures</p> </li> <li>Verify your internet connection</li> <li>Check if your account has the necessary permissions</li> </ol>"},{"location":"user-guide/authentication/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Keep Your Token Safe</li> <li>Don't share your configuration file</li> <li>Use appropriate file permissions</li> <li> <p>Don't expose the token in scripts or logs</p> </li> <li> <p>Regular Validation</p> </li> <li>Periodically verify your authentication status</li> <li>Update your credentials if you suspect any security issues</li> </ol>"},{"location":"user-guide/projects/","title":"Project Management","text":"<p>Learn how to manage your Weni projects using the CLI.</p>"},{"location":"user-guide/projects/#project-commands","title":"Project Commands","text":""},{"location":"user-guide/projects/#list-projects","title":"List Projects","text":"<p>View all projects you have access to:</p> <pre><code>weni project list\n</code></pre> <p>Filter projects by organization UUID:</p> <pre><code>weni project list --org &lt;org-uuid&gt;\n</code></pre> <p>If many results are available, you'll be prompted to load more pages (<code>p</code>) or quit (<code>q</code>).</p> <p>This command shows: - Project UUID - Project name - Organization - Creation date</p>"},{"location":"user-guide/projects/#select-project","title":"Select Project","text":"<p>Set a project as your current working project:</p> <pre><code>weni project use &lt;project-uuid&gt;\n</code></pre> <p>Replace <code>&lt;project-uuid&gt;</code> with the UUID from the project list.</p>"},{"location":"user-guide/projects/#view-current-project","title":"View Current Project","text":"<p>Check which project you're currently working with:</p> <pre><code>weni project current\n</code></pre> <p>This prints the current project UUID stored by the CLI, e.g.: <code>Current project: &lt;uuid&gt;</code></p>"},{"location":"user-guide/projects/#project-context","title":"Project Context","text":"<p>The CLI maintains a \"current project\" context, which is used by other commands like <code>project push</code>. This context is stored in your <code>.weni_cli</code> file.</p>"},{"location":"user-guide/projects/#why-project-context-matters","title":"Why Project Context Matters","text":"<ul> <li>Simplifies command usage (no need to specify project in every command)</li> <li>Prevents accidental deployments to wrong projects</li> <li>Maintains consistent workflow</li> </ul>"},{"location":"user-guide/projects/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/projects/#project-organization","title":"Project Organization","text":"<ol> <li>Naming Conventions</li> <li>Use clear, descriptive project names</li> <li> <p>Follow your organization's naming standards</p> </li> <li> <p>Project Structure</p> </li> <li>Keep related agents together</li> <li>Maintain consistent file organization</li> </ol>"},{"location":"user-guide/projects/#working-with-multiple-projects","title":"Working with Multiple Projects","text":"<ol> <li>Context Switching</li> <li>Always verify current project before operations</li> <li> <p>Use <code>project current</code> to confirm active project</p> </li> <li> <p>Project Isolation</p> </li> <li>Keep project-specific files in separate directories</li> <li>Use version control for project configurations</li> </ol>"},{"location":"user-guide/projects/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/projects/#starting-a-new-project","title":"Starting a New Project","text":"<ol> <li>Create project in Weni platform</li> <li>List projects to get UUID:    <pre><code>weni project list\n</code></pre></li> <li>Select the new project:    <pre><code>weni project use &lt;new-project-uuid&gt;\n</code></pre></li> <li>Verify selection:    <pre><code>weni project current\n</code></pre></li> </ol>"},{"location":"user-guide/projects/#managing-multiple-projects","title":"Managing Multiple Projects","text":"<ol> <li>List available projects</li> <li>Switch between projects as needed</li> <li>Verify current project before operations</li> <li>Keep project files organized</li> </ol>"},{"location":"user-guide/projects/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/projects/#common-issues","title":"Common Issues","text":"<ol> <li>Project Not Found</li> <li>Verify project UUID</li> <li>Check your access permissions</li> <li> <p>Ensure you're in the correct environment</p> </li> <li> <p>Unable to Switch Projects</p> </li> <li>Verify <code>.weni_cli</code> file permissions</li> <li>Check authentication status</li> <li> <p>Confirm project exists and is accessible</p> </li> <li> <p>Project List Empty</p> </li> <li>Verify authentication</li> <li>Check environment configuration</li> <li>Confirm you have project access</li> </ol>"},{"location":"user-guide/projects/#getting-help","title":"Getting Help","text":"<p>If you encounter issues: 1. Check command syntax 2. Verify project access 3. Contact support if needed</p>"},{"location":"utils/commands-glossary/","title":"Project Commands","text":"<p>These commands are fundamental for developing and deploying agents, allowing direct interaction with your project on the Weni platform. They help you manage your project workflow, from authentication to project selection and management.</p> Command Description <code>weni</code> Displays the main features and available commands directly in the terminal. <code>weni --version</code> Displays the current version of the Weni CLI installed on your system. <code>weni init</code> Creates an initial setup ready for use and learning with Weni. <code>weni login</code> This is how authentication happens. Use it to authenticate according to your Weni platform account. <code>weni project list</code> Existing projects in your account will be listed using this command. <code>weni project list --org &lt;org_uuid&gt;</code> Lists only projects from the specified organization UUID. <code>weni project use [project_uuid]</code> With this command you can choose a specific project to work with by providing its UUID. <code>weni project current</code> Use this to identify the project identifier you are currently working with. <code>weni project push [agent_definition_file] [--force-update]</code> Deploy/update your agents using the specified agent definition file. <code>weni run [agent_definition_file] [agent_key] [tool_key] [-f FILE] [-v]</code> Run a specific tool from an agent locally. <code>-f/--file</code> lets you choose a test file; if omitted the CLI looks for <code>test_definition.yaml</code> in the tool folder. <code>-v</code> enables verbose logs. <code>weni logs --agent &lt;agent_key&gt; --tool &lt;tool_key&gt; [--start-time ISO8601] [--end-time ISO8601] [--pattern TEXT]</code> Fetch tool execution logs. Supports pagination and ISO 8601 date formats (e.g. <code>2024-01-01T00:00:00</code>)."}]}